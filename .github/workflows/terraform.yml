name: "Execute Terraform Plan"
on:
  # push:
  #   branches:
  #     - develop/*
  pull_request:

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Upload blueprint
        id: upload-blueprint
        uses: ahmadiesa-abu/cli-action@v1.0.1
        with:
          command: blueprints upload terraform/blueprint.yaml -b $DEP_BLUEPRINT_ID
      - name: create deployment
        uses: ahmadiesa-abu/cli-action@v1.0.1
        with:
          command: deployments create  -b $DEP_BLUEPRINT_ID $DEP_DEPLOYMENT_ID
      - name: execute install
        uses: ahmadiesa-abu/cli-action@v1.0.1
        with:
          command: executions start install -d $DEP_DEPLOYMENT_ID
      - name: get cloud resource node instance id
        id: get_instance_id
        uses: ahmadiesa-abu/cli-action@v1.0.1
        with:
          command: node-instances list -d $DEP_DEPLOYMENT_ID -n cloud_resources --json

      - id: format_node_list
        name: format command output
        shell: python
        run: |
          import json
          cli_output = ${{steps.get_instance_id.outputs.cli-output}}
          instance_id = json.loads(cli_output)[0]['id']
          print ('::set-output name=instance-id::{0}'.format(instance_id))

      - name: get cloud resource instane runtime properties
        id: get_node_instance_runtime
        uses: ahmadiesa-abu/cli-action@v1.0.1
        with:
          command: node-instances get ${{ steps.format_node_list.outputs.instance-id }} --json

      - name: install json2hcl
        run: |
          curl -SsL https://github.com/kvz/json2hcl/releases/download/v0.0.6/json2hcl_v0.0.6_linux_amd64 | sudo tee /usr/local/bin/json2hcl > /dev/null && sudo chmod 755 /usr/local/bin/json2hcl

      - name: get cloud resource plan runtime property
        id: get_terraform_plan
        shell: python
        run: |
          import json

          cli_output = ${{steps.get_node_instance_runtime.outputs.cli-output}}
          plan = json.loads(cli_output)['runtime_properties']['plan']
          plan = json.dumps(plan, indent=4)
          plan = plan.replace('%','%25')
          plan = plan.replace('\n','%0A')
          plan = plan.replace('\r','%0D')
          print ('::set-output name=plan::{0}'.format(plan))

      - name: add-plan-comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.get_terraform_plan.outputs.plan }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: uninstall-deployment
        id: uninstall_deployment
        uses: ahmadiesa-abu/cli-action@v1.0.1
        with:
          command: executions start uninstall -d $DEP_DEPLOYMENT_ID

      - name: delete-deployment
        id: delete_deployment
        uses: ahmadiesa-abu/cli-action@v1.0.1
        with:
          command: deployments delete $DEP_DEPLOYMENT_ID


      - name: delete-blueprint
        id: delete_blueprint
        uses: ahmadiesa-abu/cli-action@v1.0.1
        with:
          command: blueprints delete $DEP_BLUEPRINT_ID

env:
  DEP_BLUEPRINT_ID: bp-${{ github.run_id }}
  DEP_DEPLOYMENT_ID: dep-${{ github.run_id }}
  CLOUDIFY_HOST: ${{ secrets.CLOUDIFY_HOST }}
  CLOUDIFY_USERNAME: ${{ secrets.CLOUDIFY_USERNAME }}
  CLOUDIFY_PASSWORD: ${{ secrets.CLOUDIFY_PASSWORD }}
  CLOUDIFY_TENANT: default_tenant
  CLOUDIFY_SSL: ${{ secrets.CLOUDIFY_SSL }}
  CLOUDIFY_SSL_TRUST_ALL: ${{ secrets.CLOUDIFY_SSL_TRUST_ALL }}
